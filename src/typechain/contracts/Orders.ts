/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type CandidateStruct = {
  addr: PromiseOrValue<string>;
  notRejected: PromiseOrValue<boolean>;
  lockedValueInWei: PromiseOrValue<BigNumberish>;
};

export type CandidateStructOutput = [string, boolean, BigNumber] & {
  addr: string;
  notRejected: boolean;
  lockedValueInWei: BigNumber;
};

export type OrderStruct = {
  position: PromiseOrValue<BigNumberish>;
  priority: PromiseOrValue<BigNumberish>;
  lockValueInWei: PromiseOrValue<BigNumberish>;
  reward: PromiseOrValue<BigNumberish>;
  ipfsDetails: PromiseOrValue<string>;
  executor: PromiseOrValue<string>;
  state: PromiseOrValue<BigNumberish>;
  owner: PromiseOrValue<string>;
  candidates: CandidateStruct[];
};

export type OrderStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  number,
  string,
  CandidateStructOutput[]
] & {
  position: BigNumber;
  priority: BigNumber;
  lockValueInWei: BigNumber;
  reward: BigNumber;
  ipfsDetails: string;
  executor: string;
  state: number;
  owner: string;
  candidates: CandidateStructOutput[];
};

export interface OrdersInterface extends utils.Interface {
  functions: {
    "approveByExecutor(uint256)": FunctionFragment;
    "becomeCandidate(uint256,address)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "cancelBeingCandidate(uint256,address)": FunctionFragment;
    "cancelByExecutor(uint256)": FunctionFragment;
    "chooseCandidate(uint256,address)": FunctionFragment;
    "count()": FunctionFragment;
    "createOrder(address,uint256,uint256,string)": FunctionFragment;
    "getOrder(uint256)": FunctionFragment;
    "increasePriority(uint256)": FunctionFragment;
    "markAsCompleted(uint256)": FunctionFragment;
    "markAsFailed(uint256)": FunctionFragment;
    "markAsReady(uint256)": FunctionFragment;
    "orders(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveByExecutor"
      | "becomeCandidate"
      | "cancel"
      | "cancelBeingCandidate"
      | "cancelByExecutor"
      | "chooseCandidate"
      | "count"
      | "createOrder"
      | "getOrder"
      | "increasePriority"
      | "markAsCompleted"
      | "markAsFailed"
      | "markAsReady"
      | "orders"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveByExecutor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "becomeCandidate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBeingCandidate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelByExecutor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "chooseCandidate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePriority",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "markAsCompleted",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "markAsFailed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "markAsReady",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveByExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "becomeCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelBeingCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelByExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chooseCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increasePriority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markAsCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markAsFailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markAsReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;

  events: {
    "CandidateChosen(address)": EventFragment;
    "OrderApprovedByExecutor(uint256)": EventFragment;
    "OrderCanceledByExecutor(uint256)": EventFragment;
    "OrderCancelled(uint256)": EventFragment;
    "OrderCandidateCreated(uint256)": EventFragment;
    "OrderCandidateRejected(uint256)": EventFragment;
    "OrderCompleted(uint256)": EventFragment;
    "OrderCreated(uint256)": EventFragment;
    "OrderFailed(uint256)": EventFragment;
    "OrderMetaChanged(uint256)": EventFragment;
    "OrderReady(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CandidateChosen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderApprovedByExecutor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCanceledByExecutor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCandidateCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCandidateRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderMetaChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderReady"): EventFragment;
}

export interface CandidateChosenEventObject {
  arg0: string;
}
export type CandidateChosenEvent = TypedEvent<
  [string],
  CandidateChosenEventObject
>;

export type CandidateChosenEventFilter = TypedEventFilter<CandidateChosenEvent>;

export interface OrderApprovedByExecutorEventObject {
  numberInList: BigNumber;
}
export type OrderApprovedByExecutorEvent = TypedEvent<
  [BigNumber],
  OrderApprovedByExecutorEventObject
>;

export type OrderApprovedByExecutorEventFilter =
  TypedEventFilter<OrderApprovedByExecutorEvent>;

export interface OrderCanceledByExecutorEventObject {
  numberInList: BigNumber;
}
export type OrderCanceledByExecutorEvent = TypedEvent<
  [BigNumber],
  OrderCanceledByExecutorEventObject
>;

export type OrderCanceledByExecutorEventFilter =
  TypedEventFilter<OrderCanceledByExecutorEvent>;

export interface OrderCancelledEventObject {
  numberInList: BigNumber;
}
export type OrderCancelledEvent = TypedEvent<
  [BigNumber],
  OrderCancelledEventObject
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export interface OrderCandidateCreatedEventObject {
  numberInList: BigNumber;
}
export type OrderCandidateCreatedEvent = TypedEvent<
  [BigNumber],
  OrderCandidateCreatedEventObject
>;

export type OrderCandidateCreatedEventFilter =
  TypedEventFilter<OrderCandidateCreatedEvent>;

export interface OrderCandidateRejectedEventObject {
  numberInList: BigNumber;
}
export type OrderCandidateRejectedEvent = TypedEvent<
  [BigNumber],
  OrderCandidateRejectedEventObject
>;

export type OrderCandidateRejectedEventFilter =
  TypedEventFilter<OrderCandidateRejectedEvent>;

export interface OrderCompletedEventObject {
  numberInList: BigNumber;
}
export type OrderCompletedEvent = TypedEvent<
  [BigNumber],
  OrderCompletedEventObject
>;

export type OrderCompletedEventFilter = TypedEventFilter<OrderCompletedEvent>;

export interface OrderCreatedEventObject {
  numberInList: BigNumber;
}
export type OrderCreatedEvent = TypedEvent<
  [BigNumber],
  OrderCreatedEventObject
>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export interface OrderFailedEventObject {
  numberInList: BigNumber;
}
export type OrderFailedEvent = TypedEvent<[BigNumber], OrderFailedEventObject>;

export type OrderFailedEventFilter = TypedEventFilter<OrderFailedEvent>;

export interface OrderMetaChangedEventObject {
  numberInList: BigNumber;
}
export type OrderMetaChangedEvent = TypedEvent<
  [BigNumber],
  OrderMetaChangedEventObject
>;

export type OrderMetaChangedEventFilter =
  TypedEventFilter<OrderMetaChangedEvent>;

export interface OrderReadyEventObject {
  numberInList: BigNumber;
}
export type OrderReadyEvent = TypedEvent<[BigNumber], OrderReadyEventObject>;

export type OrderReadyEventFilter = TypedEventFilter<OrderReadyEvent>;

export interface Orders extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrdersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveByExecutor(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    becomeCandidate(
      idx: PromiseOrValue<BigNumberish>,
      _cand: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelBeingCandidate(
      idx: PromiseOrValue<BigNumberish>,
      _cand: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelByExecutor(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    chooseCandidate(
      idx: PromiseOrValue<BigNumberish>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    createOrder(
      _owner: PromiseOrValue<string>,
      _reward: PromiseOrValue<BigNumberish>,
      _minLockValueInWei: PromiseOrValue<BigNumberish>,
      _ipfsDetails: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOrder(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increasePriority(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    markAsCompleted(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    markAsFailed(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    markAsReady(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        string
      ] & {
        position: BigNumber;
        priority: BigNumber;
        lockValueInWei: BigNumber;
        reward: BigNumber;
        ipfsDetails: string;
        executor: string;
        state: number;
        owner: string;
      }
    >;
  };

  approveByExecutor(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  becomeCandidate(
    idx: PromiseOrValue<BigNumberish>,
    _cand: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancel(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelBeingCandidate(
    idx: PromiseOrValue<BigNumberish>,
    _cand: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelByExecutor(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  chooseCandidate(
    idx: PromiseOrValue<BigNumberish>,
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  count(overrides?: CallOverrides): Promise<BigNumber>;

  createOrder(
    _owner: PromiseOrValue<string>,
    _reward: PromiseOrValue<BigNumberish>,
    _minLockValueInWei: PromiseOrValue<BigNumberish>,
    _ipfsDetails: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOrder(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increasePriority(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  markAsCompleted(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  markAsFailed(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  markAsReady(
    idx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  orders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      number,
      string
    ] & {
      position: BigNumber;
      priority: BigNumber;
      lockValueInWei: BigNumber;
      reward: BigNumber;
      ipfsDetails: string;
      executor: string;
      state: number;
      owner: string;
    }
  >;

  callStatic: {
    approveByExecutor(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    becomeCandidate(
      idx: PromiseOrValue<BigNumberish>,
      _cand: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelBeingCandidate(
      idx: PromiseOrValue<BigNumberish>,
      _cand: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelByExecutor(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    chooseCandidate(
      idx: PromiseOrValue<BigNumberish>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    createOrder(
      _owner: PromiseOrValue<string>,
      _reward: PromiseOrValue<BigNumberish>,
      _minLockValueInWei: PromiseOrValue<BigNumberish>,
      _ipfsDetails: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[OrderStructOutput, BigNumber]>;

    getOrder(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<OrderStructOutput>;

    increasePriority(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    markAsCompleted(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    markAsFailed(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    markAsReady(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        string
      ] & {
        position: BigNumber;
        priority: BigNumber;
        lockValueInWei: BigNumber;
        reward: BigNumber;
        ipfsDetails: string;
        executor: string;
        state: number;
        owner: string;
      }
    >;
  };

  filters: {
    "CandidateChosen(address)"(arg0?: null): CandidateChosenEventFilter;
    CandidateChosen(arg0?: null): CandidateChosenEventFilter;

    "OrderApprovedByExecutor(uint256)"(
      numberInList?: null
    ): OrderApprovedByExecutorEventFilter;
    OrderApprovedByExecutor(
      numberInList?: null
    ): OrderApprovedByExecutorEventFilter;

    "OrderCanceledByExecutor(uint256)"(
      numberInList?: null
    ): OrderCanceledByExecutorEventFilter;
    OrderCanceledByExecutor(
      numberInList?: null
    ): OrderCanceledByExecutorEventFilter;

    "OrderCancelled(uint256)"(numberInList?: null): OrderCancelledEventFilter;
    OrderCancelled(numberInList?: null): OrderCancelledEventFilter;

    "OrderCandidateCreated(uint256)"(
      numberInList?: null
    ): OrderCandidateCreatedEventFilter;
    OrderCandidateCreated(
      numberInList?: null
    ): OrderCandidateCreatedEventFilter;

    "OrderCandidateRejected(uint256)"(
      numberInList?: null
    ): OrderCandidateRejectedEventFilter;
    OrderCandidateRejected(
      numberInList?: null
    ): OrderCandidateRejectedEventFilter;

    "OrderCompleted(uint256)"(numberInList?: null): OrderCompletedEventFilter;
    OrderCompleted(numberInList?: null): OrderCompletedEventFilter;

    "OrderCreated(uint256)"(numberInList?: null): OrderCreatedEventFilter;
    OrderCreated(numberInList?: null): OrderCreatedEventFilter;

    "OrderFailed(uint256)"(numberInList?: null): OrderFailedEventFilter;
    OrderFailed(numberInList?: null): OrderFailedEventFilter;

    "OrderMetaChanged(uint256)"(
      numberInList?: null
    ): OrderMetaChangedEventFilter;
    OrderMetaChanged(numberInList?: null): OrderMetaChangedEventFilter;

    "OrderReady(uint256)"(numberInList?: null): OrderReadyEventFilter;
    OrderReady(numberInList?: null): OrderReadyEventFilter;
  };

  estimateGas: {
    approveByExecutor(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    becomeCandidate(
      idx: PromiseOrValue<BigNumberish>,
      _cand: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancel(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelBeingCandidate(
      idx: PromiseOrValue<BigNumberish>,
      _cand: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelByExecutor(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    chooseCandidate(
      idx: PromiseOrValue<BigNumberish>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    createOrder(
      _owner: PromiseOrValue<string>,
      _reward: PromiseOrValue<BigNumberish>,
      _minLockValueInWei: PromiseOrValue<BigNumberish>,
      _ipfsDetails: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOrder(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increasePriority(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    markAsCompleted(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    markAsFailed(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    markAsReady(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveByExecutor(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    becomeCandidate(
      idx: PromiseOrValue<BigNumberish>,
      _cand: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelBeingCandidate(
      idx: PromiseOrValue<BigNumberish>,
      _cand: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelByExecutor(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    chooseCandidate(
      idx: PromiseOrValue<BigNumberish>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createOrder(
      _owner: PromiseOrValue<string>,
      _reward: PromiseOrValue<BigNumberish>,
      _minLockValueInWei: PromiseOrValue<BigNumberish>,
      _ipfsDetails: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOrder(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increasePriority(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    markAsCompleted(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    markAsFailed(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    markAsReady(
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
