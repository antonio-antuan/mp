/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Commission,
  CommissionInterface,
} from "../../contracts/Commission";

const _abi = [
  {
    inputs: [],
    name: "increasePriority",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060bb8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806307535c6914602d575b600080fd5b60336047565b604051603e9190606c565b60405180910390f35b60006103e8905090565b600061ffff82169050919050565b6066816051565b82525050565b6000602082019050607f6000830184605f565b9291505056fea2646970667358221220aa06274caac2f7cdad53822fbeed80d628728a497e3cf67f7867921484ff934f64736f6c63430008110033";

type CommissionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CommissionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Commission__factory extends ContractFactory {
  constructor(...args: CommissionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Commission> {
    return super.deploy(overrides || {}) as Promise<Commission>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Commission {
    return super.attach(address) as Commission;
  }
  override connect(signer: Signer): Commission__factory {
    return super.connect(signer) as Commission__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommissionInterface {
    return new utils.Interface(_abi) as CommissionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Commission {
    return new Contract(address, _abi, signerOrProvider) as Commission;
  }
}
